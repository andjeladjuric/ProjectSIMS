<Page x:Class="HospitalService.View.ManagerUI.Views.EditInventoryView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:HospitalService.View.ManagerUI.Views"
      xmlns:conv="clr-namespace:HospitalService.View.ManagerUI.Converters"
      xmlns:validation="clr-namespace:HospitalService.View.ManagerUI.Validations"
      xmlns:System="clr-namespace:System;assembly=mscorlib"
      xmlns:model="clr-namespace:Model"
      mc:Ignorable="d" 
      d:DesignHeight="718" d:DesignWidth="969"
      Title="EditInventory">

    <Page.Resources>
        <ResourceDictionary>
            <conv:InventoryTypeConverter x:Key="invConverter"/>
            <ObjectDataProvider x:Key="dataFromEnum" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="model:Equipment"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Indigo.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Indigo.xaml" />
                <ResourceDictionary Source="Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>

    <Grid Background="#f5f5f5">
        <Button x:Name="Stop" Margin="708,142,129,0" VerticalAlignment="Top" Height="34" Background="{x:Null}" 
                        BorderThickness="1" Command="{Binding StopDemo}">
            <Label Content="Zaustavi DEMO" VerticalAlignment="Center" FontWeight="DemiBold"
                       FontStyle="Italic"/>
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DemoOn}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Grid x:Name="EditGrid" Margin="91,101,91,105">
            <Border HorizontalAlignment="Center" Height="356" VerticalAlignment="Top" Width="733"
                CornerRadius="10" BorderThickness="0.5" BorderBrush="Black" Margin="0,94,0,0"/>

            <Label x:Name="id" Content="ID" HorizontalAlignment="Left" Margin="77,161,0,0" VerticalAlignment="Top" 
                   Width="122" Height="36"/>
            <Label x:Name="name" Content="Naziv" HorizontalAlignment="Left" Margin="78,220,0,0" VerticalAlignment="Top" 
                   Width="122" Height="36"/>
            <Label x:Name="kolicina" Content="Količina" HorizontalAlignment="Left" Margin="430,220,0,0" VerticalAlignment="Top" 
                   Width="122" Height="36"/>
            <Label x:Name="type" Content="Vrsta" HorizontalAlignment="Left" Margin="78,292,0,0" VerticalAlignment="Top" 
                   Width="122" Height="35"/>
            <Label x:Name="supplier" Content="Proizvođač" HorizontalAlignment="Left" Margin="430,292,0,0" VerticalAlignment="Top" 
                   Width="122" Height="36"/>
            <TextBox x:Name="IDBox" Text="{Binding ItemId, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="False"
                     HorizontalAlignment="Left" Height="36" Margin="204,154,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="168" 
                     Foreground="#474746"
                     FontFamily="Roboto"
                     FontWeight="Light"
                     FontSize="14"
                     HorizontalContentAlignment="Center"/>
            <TextBox x:Name="NameBox" HorizontalAlignment="Left" Height="36" Margin="204,218,0,0" TextWrapping="Wrap" 
                     VerticalAlignment="Top" Width="168"
                     Foreground="#474746"
                     FontFamily="Roboto"
                     FontWeight="Light"
                     FontSize="14"
                     HorizontalContentAlignment="Center">
                <TextBox.Text>
                    <Binding Path="ItemName" Mode="TwoWay" ValidatesOnDataErrors="True" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:ItemNameValidation ValidationStep="RawProposedValue"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
                <Validation.ErrorTemplate>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <TextBlock Text="{Binding [0].ErrorContent}" Foreground="#FFE52020"/>
                        </StackPanel>
                    </ControlTemplate>
                </Validation.ErrorTemplate>
            </TextBox>

            <ComboBox x:Name="comboBox" ItemsSource="{Binding Source={StaticResource dataFromEnum}}" 
                      SelectedItem="{Binding Type, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                      HorizontalAlignment="Left" Height="35" Margin="204,289,0,0" VerticalAlignment="Top" Width="168"
                      Foreground="#474746"
                      FontFamily="Roboto"
                      FontWeight="Light"
                      FontSize="14"
                      HorizontalContentAlignment="Center">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource invConverter}}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <Button x:Name="save" Content="Potvrdi" HorizontalAlignment="Left" Margin="283,384,0,0" VerticalAlignment="Top" 
                    Height="35" Width="90" Command="{Binding ConfirmCommand}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=NameBox, Path=Text}" Value="">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=NameBox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=KolicinaBox, Path=Text}" Value="">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=KolicinaBox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=suppBox, Path=Text}" Value="">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=suppBox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=comboBox, Path=SelectedIndex}" Value="-1">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <Button x:Name="cancel" Content="Otkaži" HorizontalAlignment="Left" Margin="409,384,0,0" VerticalAlignment="Top" Height="35" Width="88" 
                    RenderTransformOrigin="0.522,0.406" Command="{Binding CancelCommand}"/>
            <TextBox x:Name="KolicinaBox" HorizontalAlignment="Left" Height="36" Margin="546,220,0,0" TextWrapping="Wrap" 
                     VerticalAlignment="Top" Width="168"
                     Foreground="#474746"
                     FontFamily="Roboto"
                     FontWeight="Light"
                     FontSize="14"
                     HorizontalContentAlignment="Center">
                <TextBox.Resources>
                    <validation:MinInventoryProxy x:Key="proxy" Data="{Binding}"/>
                </TextBox.Resources>
                <TextBox.Text>
                    <Binding Path="Quantity" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:EditQuantityValidation ValidationStep="RawProposedValue">
                                <validation:EditQuantityValidation.Wrapper>
                                    <validation:MinInventoryWrapper Min ="{Binding Path=Data.SelectedItem.Quantity, Source={StaticResource proxy}}"/>
                                </validation:EditQuantityValidation.Wrapper>
                            </validation:EditQuantityValidation>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
                <Validation.ErrorTemplate>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <TextBlock Text="{Binding [0].ErrorContent}" Foreground="#FFE52020"/>
                        </StackPanel>
                    </ControlTemplate>
                </Validation.ErrorTemplate>
            </TextBox>

            <TextBox x:Name="suppBox" HorizontalAlignment="Left" Height="34" Margin="546,289,0,0" TextWrapping="Wrap" VerticalAlignment="Top" 
                     Width="168" Foreground="#474746"
                     FontFamily="Roboto"
                     FontWeight="Light"
                     FontSize="14"
                     HorizontalContentAlignment="Center">
                <TextBox.Text>
                    <Binding Path="Supplier" Mode="TwoWay" ValidatesOnDataErrors="True" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:ItemNameValidation ValidationStep="RawProposedValue"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
                <Validation.ErrorTemplate>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <TextBlock Text="{Binding [0].ErrorContent}" Foreground="#FFE52020"/>
                        </StackPanel>
                    </ControlTemplate>
                </Validation.ErrorTemplate>
            </TextBox>

            <TextBlock x:Name="textBlock" HorizontalAlignment="Left" Margin="27,37,0,0" Text="Izmena stavke" TextWrapping="Wrap" 
                       VerticalAlignment="Top" Height="57" Width="227" FontFamily="Roboto" FontSize="36" FontStyle="Italic" TextAlignment="Center"/>
        </Grid>
        <Frame x:Name="newFrame" NavigationUIVisibility="Hidden"/>
        <Popup x:Name="pp" Placement="Center" IsOpen="{Binding IsPopupOpen}" Width="400" Height="200" AllowsTransparency="True">
            <local:Message/>
        </Popup>
        <Popup x:Name="stop" Placement="Center" IsOpen="{Binding Warning}" Width="400" Height="200" AllowsTransparency="True">
            <local:StartDemo/>
        </Popup>
    </Grid>
</Page>
