<Page x:Class="HospitalService.View.ManagerUI.Views.MoveInventoryView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:validation="clr-namespace:HospitalService.View.ManagerUI.Validations"
      xmlns:sys="clr-namespace:System;assembly=mscorlib"
      xmlns:local="clr-namespace:HospitalService.View.ManagerUI.Views"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
      mc:Ignorable="d" 
      d:DesignHeight="718" d:DesignWidth="969"
      Title="MoveInventory">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Indigo.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Indigo.xaml" />
                <ResourceDictionary Source="Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Page.Resources>


    <Grid Background="#f5f5f5">

        <Grid x:Name="grid" Margin="190,103,223,103">
            <Border HorizontalAlignment="Center" Height="389" VerticalAlignment="Top" Width="512" Margin="0,94,0,0"
                    CornerRadius="10" BorderThickness="0.5" BorderBrush="Black"/>
            <Label x:Name="quantity" Content="Količina" HorizontalAlignment="Left" Margin="131,344,0,0" VerticalAlignment="Top" 
                   Width="112" Height="30"/>
            <TextBox x:Name="quantityBox" HorizontalAlignment="Left" Height="32" Margin="264,338,0,0" TextWrapping="Wrap" VerticalAlignment="Top"
                     Width="154" Foreground="#474746"
                     FontFamily="Roboto"
                     FontWeight="Light"
                     FontSize="14"
                     HorizontalContentAlignment="Center">
                <TextBox.Resources>
                    <validation:MaxInventoryProxy x:Key="proxy" Data="{Binding}"/>
                </TextBox.Resources>
                <TextBox.Text>
                    <Binding Path="Quantity" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:MoveQuantityValidation ValidationStep="RawProposedValue">
                                <validation:MoveQuantityValidation.Wrapper>
                                    <validation:MaxWrapper Max ="{Binding Path=Data.SelectedItem.Quantity, Source={StaticResource proxy}}"/>
                                </validation:MoveQuantityValidation.Wrapper>
                            </validation:MoveQuantityValidation>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
                <Validation.ErrorTemplate>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <TextBlock Text="{Binding [0].ErrorContent}" Foreground="#FFE52020">
                            </TextBlock>
                        </StackPanel>
                    </ControlTemplate>
                </Validation.ErrorTemplate>
            </TextBox>
            <TextBlock Text="{Binding ValidationErrors[Quantity], Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                               Foreground="#FFE52020" TextWrapping="Wrap" FontSize="14" Margin="131,132,138,346" TextAlignment="Center"/>

            <Button x:Name="save" Content="Potvrdi" HorizontalAlignment="Left" Margin="173,418,0,0" VerticalAlignment="Top" Height="30" Width="81"
                    Command="{Binding ConfirmCommand}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=quantityBox, Path=Text}" Value="">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=quantityBox, Path=(Validation.HasError)}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=TimeBox, Path=IsEnabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TimeBox, Path=Text}" Value=""/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="False"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=TimeBox, Path=IsEnabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=TimeBox, Path=(Validation.HasError)}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="False"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=datePicker, Path=IsEnabled}" Value="True"/>
                                    <Condition Binding="{Binding ElementName=datePicker, Path=Text}" Value=""/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="False"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>


            <Button x:Name="cancel" Content="Otkaži" HorizontalAlignment="Left" Margin="297,418,0,0" VerticalAlignment="Top" Height="30" 
                    Width="80" Command="{Binding CancelCommand}"/>
            <TextBlock x:Name="textBlock" HorizontalAlignment="Left" Margin="12,37,0,0" Text="Premesti stavku" TextWrapping="Wrap" VerticalAlignment="Top" Height="57" Width="281" FontFamily="Roboto" FontSize="36" FontStyle="Italic" TextAlignment="Center"/>
            <Label x:Name="Stavka" Content="Izabrana stavka" HorizontalAlignment="Left" Margin="131,170,0,0" VerticalAlignment="Top" 
                   Width="121" Height="30"/>
            <TextBox x:Name="IDBox" Text="{Binding SelectedItem.Id, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="False" 
                     HorizontalAlignment="Left" Height="32" Margin="264,164,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="154" 
                     Foreground="#474746"
                     FontWeight="Light"
                     FontFamily="Roboto"
                     FontSize="14"
                     HorizontalContentAlignment="Center"/>

            <DatePicker x:Name="datePicker" SelectedDate="{Binding Date}" DisplayDateStart="{x:Static sys:DateTime.Today}" HorizontalAlignment="Left"
                        Margin="264,226,0,0" VerticalAlignment="Top" Width="154" Height="30"
                        Foreground="#474746"
                        FontFamily="Roboto"
                        FontWeight="Light"
                        FontSize="14"
                        HorizontalContentAlignment="Center">
                <DatePicker.Style>
                    <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource {x:Type DatePicker}}">
                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedItem.EquipmentType}" Value="1">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DatePicker.Style>
            </DatePicker>

            <Label x:Name="time" Content="Vreme" HorizontalAlignment="Left" Margin="131,286,0,0" VerticalAlignment="Top" 
                   Width="112" Height="30"/>
            <Label x:Name="date" Content="Datum" HorizontalAlignment="Left" Margin="131,226,0,0" VerticalAlignment="Top" 
                   Width="112" Height="30"/>
            <TextBox x:Name="TimeBox" HorizontalAlignment="Left" Height="32" Margin="264,280,0,0" TextWrapping="Wrap" 
                     VerticalAlignment="Top" Width="154"
                     Foreground="#474746"
                     FontFamily="Roboto"
                     FontWeight="Light"
                     FontSize="14"
                     HorizontalContentAlignment="Center">
                <TextBox.Style>
                    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Setter Property="IsEnabled" Value="True"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding SelectedItem.EquipmentType}" Value="1">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBox.Style>
                <TextBox.Resources>
                    <validation:TimeProxy x:Key="proxy" Data="{Binding}"/>
                </TextBox.Resources>
                <TextBox.Text>
                    <Binding Path="EnteredTime" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <validation:DateTimeValidation ValidationStep="RawProposedValue">
                                <validation:DateTimeValidation.Wrapper>
                                    <validation:TimeWrapper Time ="{Binding Path=Data.Date, Source={StaticResource proxy}}"/>
                                </validation:DateTimeValidation.Wrapper>
                            </validation:DateTimeValidation>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
                <Validation.ErrorTemplate>
                    <ControlTemplate>
                        <StackPanel>
                            <AdornedElementPlaceholder x:Name="textBox"/>
                            <TextBlock Text="{Binding [0].ErrorContent}" Foreground="#FFE52020"/>
                        </StackPanel>
                    </ControlTemplate>
                </Validation.ErrorTemplate>
            </TextBox>
        </Grid>

        <Button x:Name="Stop" Margin="585,143,252,0" VerticalAlignment="Top" Height="34" Background="{x:Null}" 
                        BorderThickness="1" Command="{Binding StopDemo}">
            <Label Content="Zaustavi DEMO" VerticalAlignment="Top" FontWeight="DemiBold"
                       FontStyle="Italic"/>
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DemoOn}" Value="True">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <Frame x:Name="newFrame" NavigationUIVisibility="Hidden"/>
        <Popup x:Name="pp" Placement="Center" IsOpen="{Binding IsPopupOpen}" Width="400" Height="200" AllowsTransparency="True">
            <local:Message />
        </Popup>
        <Popup x:Name="stop" Placement="Center" IsOpen="{Binding Warning}" Width="400" Height="200" AllowsTransparency="True">
            <local:StartDemo/>
        </Popup>
    </Grid>
</Page>
